#!/usr/bin/python
import argparse
import logging

from yandex_tank_api import manager

def parse_options():
    """ parse command line options """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Debug mode of torando',
        dest='debug',
        default=False)
    parser.add_argument(
        '--work-dir',
        help='Working directory (for tests, etc).',
        default='./output',
        dest='work_dir')
    parser.add_argument(
        '--log',
        help='Log file',
        default=None,
        dest='log_file')
    parser.add_argument(
        '-k',
        '--lock-dir',
        action='store',
        dest='lock_dir',
        default='/yandex-tank-api/lock-dir',
        help='Directory for lock file')
    parser.add_argument(
        '--configs-location',
        action='store',
        help='set location to look for default yandex-tank configs in',
        default='/etc',
        dest='configs_location')
    parser.add_argument(
        '--ignore-machine-defaults',
        action='store_true',
        help='Ignore tank defaults from <configs-location>/yandex-tank/',
        default=False,
        dest='ignore_machine_defaults')
    parser.add_argument(
        '--disposable',
        action='store_true',
        help='exit after one test',
        default=False,
        dest='disposable')
    return parser.parse_args()


def signal_handler(sig, frame):
    """ required for everything to be released safely on SIGTERM and SIGINT"""
    raise KeyboardInterrupt()


if __name__ == '__main__':
    logging.basicConfig(
        level=logging.DEBUG, format='%(asctime)s %(levelname)s: %(message)s')
    options = parse_options()

    try:
        manager.run_server(options)
    except:
        logging.exception('Uncaught exception:')
